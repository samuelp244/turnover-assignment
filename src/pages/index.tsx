import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import { useAppDispatch } from "npm/redux/hooks";
import { addUserData } from "npm/redux/userSlice";
import { type zodCustomError } from "npm/types";
import { api } from "npm/utils/api";
import { type ChangeEvent, type FormEvent, useState } from "react";
import { z } from "zod";

export default function Home() {
  const [user, setUser] = useState({
    name: "",
    email: "",
    password: "",
  });
  const dispatch = useAppDispatch();
  const router = useRouter();
  const [errors, setErrors] = useState<zodCustomError[]>([]);
  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {
    setErrors([]);
    const { name, value } = e.target;
    setUser((prevUser) => ({
      ...prevUser,
      [name]: value,
    }));
  };
  const createUser = api.auth.signUp.useMutation({
    onSuccess: async (response) => {
      dispatch(
        addUserData({
          email: user.email,
          name: user.name,
          userId: response.data.id,
        }),
      );
      await router.push("/verify");
    },
  });
  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    try {
      // user validation schema
      const userSchema = z.object({
        name: z.string({ required_error: "name is required" }).min(1),
        email: z.string({ required_error: "email is required" }).email(),
        password: z
          .string({ required_error: "password is required" })
          .min(8, { message: "password must be at least 8 characters long" })
          .regex(/[a-z]/, {
            message: "password must contain at least one lowercase letter",
          })
          .regex(/[A-Z]/, {
            message: "password must contain at least one uppercase letter",
          })
          .regex(/[0-9]/, {
            message: "password must contain at least one digit",
          }),
      });
      // validating inputs with the user schema
      const userValidationResponse = userSchema.safeParse(user);
      // showing the error messages
      if (!userValidationResponse.success) {
        const errArr: zodCustomError[] = [];
        const { errors: err } = userValidationResponse.error;
        for (const error of err) {
          errArr.push({ for: error.path[0], message: error.message });
        }
        setErrors(errArr);
        throw err;
      }
      setErrors([]);
      createUser.mutate(user);
    } catch (error) {
      console.log(error);
    }
  };
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center ">
        <div className="flex min-w-[576px] flex-col items-center justify-center rounded-xl border-2 border-[#C1C1C1] p-10">
          <h1 className="mb-10 text-3xl font-semibold text-black">
            Create your account
          </h1>
          <form
            onSubmit={handleSubmit}
            className="flex w-full flex-col gap-y-10"
          >
            <div>
              <p className="mb-1 text-lg font-normal">Name</p>
              <input
                type="text"
                name="name"
                placeholder="Enter"
                value={user.name}
                onChange={handleChange}
                className="w-full rounded-md border border-[#C1C1C1] p-3"
              />
              <p className="absolute mt-1 text-xs font-normal text-red-500">
                {errors.find((error) => error.for === "name")?.message}
              </p>
            </div>
            <div>
              <p className="mb-1 text-lg font-normal">Email</p>
              <input
                type="text"
                name="email"
                placeholder="Enter"
                value={user.email}
                onChange={handleChange}
                className="w-full rounded-md border border-[#C1C1C1] p-3"
              />
              <p className="absolute mt-1 text-xs font-normal text-red-500">
                {errors.find((error) => error.for === "email")?.message}
              </p>
            </div>
            <div>
              <p className="mb-1 text-lg font-normal">Password</p>
              <input
                type="password"
                name="password"
                placeholder="Enter"
                value={user.password}
                onChange={handleChange}
                className="w-full rounded-md border border-[#C1C1C1] p-3"
              />
              <p className="absolute mt-1 text-xs font-normal text-red-500">
                {errors.find((error) => error.for === "password")?.message}
              </p>
            </div>
            <button type="submit" className="w-full bg-black p-3 text-white">
              {createUser.isPending ? "submitting..." : "CREATE ACCOUNT"}
            </button>
          </form>
          <div className="mt-14">
            <p className="text-base font-normal">
              Have an Account?{" "}
              <span>
                <Link href={"/login"} className="font-medium">
                  LOGIN
                </Link>
              </span>
            </p>
          </div>
        </div>
      </main>
    </>
  );
}
